package com.wxm.appbackend.usrmsg

import com.wxm.appbackend.usrmsg.data.UsrMsg
import com.wxm.appbackend.usrmsg.data.UsrMsgIdMismatchExeption
import com.wxm.appbackend.usrmsg.data.UsrMsgNotFoundException
import com.wxm.appbackend.usrmsg.data.UsrMsgRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpStatus
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@RestController
@RequestMapping(path = ["/api/usrMsg"]) // This means URL's start with /demo (after Application path)
class UsrMsgController {
    // This means to get the bean called usrMsgRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private lateinit var usrMsgRepository: UsrMsgRepository

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    fun create(@RequestBody um: UsrMsg): UsrMsg {
        return usrMsgRepository.save(um)
    }

    @GetMapping
    @ResponseBody
    fun getAll(): Iterable<UsrMsg>  {
        return usrMsgRepository.findAll()
    }

    @GetMapping("/{id}")
    fun findOne(@PathVariable id: Int): UsrMsg {
        return usrMsgRepository.findById(id).orElseThrow(UsrMsgNotFoundException::class.java::newInstance)
    }

    @PutMapping("/{id}")
    fun updateOne(@RequestBody um: UsrMsg, @PathVariable id: Int): UsrMsg {
        if(um.id!! != id) {
            throw UsrMsgIdMismatchExeption()
        }

        usrMsgRepository.findById(id).orElseThrow(UsrMsgNotFoundException::class.java::newInstance)
        return usrMsgRepository.save(um)
    }

    @DeleteMapping("/{id}")
    fun deleteOne(@PathVariable id: Int) {
        usrMsgRepository.findById(id).orElseThrow(UsrMsgNotFoundException::class.java::newInstance)
        usrMsgRepository.deleteById(id)
    }
}